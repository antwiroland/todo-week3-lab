name: Build, Push to ECR and Deploy via CodePipeline

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  build-push-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Generate Deployment Artifacts
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          AWS_REGION: eu-central-1
        run: |
          # Create appspec.yml
          cat > appspec.yml << 'APP_SPEC'
            version: 0.0
            Resources:
              - TargetService:
                  Type: AWS::ECS::Service
                  Properties:
                    TaskDefinition: "java-full-stack-Task"
                    LoadBalancerInfo:
                      ContainerName: "java-full-stack-Container"
                      ContainerPort: 8080
            APP_SPEC

                      # Create taskdef.json
                      cat > taskdef.json << 'TASKDEF'
            {
              "family": "java-full-stack-Task",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "$TASK_EXECUTION_ROLE_ARN",
              "taskRoleArn": "$TASK_ROLE_ARN",
              "containerDefinitions": [
                {
                  "name": "java-full-stack-Container",
                  "image": "$ECR_REGISTRY/$ECR_REPOSITORY:latest",
                  "essential": true,
                  "portMappings": [
                    { "containerPort": 8080, "protocol": "tcp" }
                  ],
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"],
                    "interval": 30,
                    "timeout": 5,
                    "retries": 3,
                    "startPeriod": 60
                  },
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/ecs/java-full-stack",
                      "awslogs-region": "$AWS_REGION",
                      "awslogs-stream-prefix": "ecs"
                    }
                  }
                }
              ]
            }
            TASKDEF

          # Replace environment variables in taskdef.json
          export TASK_EXECUTION_ROLE_ARN="${{ secrets.TASK_EXECUTION_ROLE_ARN }}"
          export TASK_ROLE_ARN="${{ secrets.TASK_ROLE_ARN }}"
          envsubst < taskdef.json > taskdef_temp.json
          mv taskdef_temp.json taskdef.json

          # Show generated artifacts for debugging
          echo "----- appspec.yml -----"
          cat appspec.yml
          echo "----- taskdef.json -----"
          cat taskdef.json

          # Validate JSON syntax
          jq empty taskdef.json

          # Package into zip for CodePipeline / CodeDeploy
          zip -j deployment-artifacts.zip appspec.yml taskdef.json

      - name: Upload Deployment Artifacts to S3
        run: |
          aws s3 cp deployment-artifacts.zip s3://${{ secrets.ARTIFACT_BUCKET }}/deployment-artifacts/latest.zip

      - name: Trigger CodePipeline
        run: aws codepipeline start-pipeline-execution --name java-full-stack-Pipeline