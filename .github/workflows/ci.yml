name: Deploy Spring Boot to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  EB_APP_NAME: spring-boot-eb-demo
  S3_BUCKET_NAME: beantalk-bucket
  EB_ENVIRONMENT_NAME: spring-boot-eb-demo-env

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test with Maven
        run: mvn clean package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: target/

      - name: Create deployment package
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          
          VERSION_LABEL="${{ github.sha }}-$TIMESTAMP"
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
          
          mkdir -p deployment
          cp target/*.jar deployment/
          
          if [ -f "Procfile" ]; then
            cp Procfile deployment/
          else
            echo "web: java -jar $(ls deployment/*.jar)" > deployment/Procfile
          fi
          
          cp -r .ebextensions deployment/ 2>/dev/null || true
          
          cd deployment
          zip -r ../spring-boot-app-$TIMESTAMP.zip .
          cd ..
          
          echo "ZIP_FILE=spring-boot-app-$TIMESTAMP.zip" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 cp $ZIP_FILE s3://${{ env.S3_BUCKET_NAME }}/deployments/$ZIP_FILE
          echo "S3_OBJECT_KEY=deployments/$ZIP_FILE" >> $GITHUB_ENV

      - name: Create Elastic Beanstalk application if needed
        run: |
          APP_EXISTS=$(aws elasticbeanstalk describe-applications \
            --query "Applications[?ApplicationName=='${{ env.EB_APP_NAME }}'].ApplicationName" \
            --output text)

          if [ "$APP_EXISTS" = "${{ env.EB_APP_NAME }}" ]; then
            echo "Application ${{ env.EB_APP_NAME }} already exists"
          else
            echo "Creating Elastic Beanstalk application: ${{ env.EB_APP_NAME }}"
            aws elasticbeanstalk create-application \
              --application-name ${{ env.EB_APP_NAME }} \
              --description "Spring Boot application"
          fi

      - name: Create or update Elastic Beanstalk environment
        run: |
          create_environment() {
            echo "Creating Elastic Beanstalk environment: ${{ env.EB_ENVIRONMENT_NAME }}"

            # Create service role if not exists
            if ! aws iam get-role --role-name aws-elasticbeanstalk-service-role 2>/dev/null; then
              aws iam create-role \
                --role-name aws-elasticbeanstalk-service-role \
                --assume-role-policy-document '{
                  "Version": "2012-10-17",
                  "Statement": [{"Effect":"Allow","Principal":{"Service":"elasticbeanstalk.amazonaws.com"},"Action":"sts:AssumeRole"}]
                }'
              aws iam attach-role-policy \
                --role-name aws-elasticbeanstalk-service-role \
                --policy-arn arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
              aws iam attach-role-policy \
                --role-name aws-elasticbeanstalk-service-role \
                --policy-arn arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService
            fi

            # Create EC2 instance profile if not exists
            if ! aws iam get-instance-profile --instance-profile-name aws-elasticbeanstalk-ec2-role 2>/dev/null; then
              aws iam create-role \
                --role-name aws-elasticbeanstalk-ec2-role \
                --assume-role-policy-document '{
                  "Version": "2012-10-17",
                  "Statement": [{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]
                }'
              aws iam attach-role-policy \
                --role-name aws-elasticbeanstalk-ec2-role \
                --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
              aws iam attach-role-policy \
                --role-name aws-elasticbeanstalk-ec2-role \
                --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
              aws iam attach-role-policy \
                --role-name aws-elasticbeanstalk-ec2-role \
                --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
              aws iam create-instance-profile \
                --instance-profile-name aws-elasticbeanstalk-ec2-role
              aws iam add-role-to-instance-profile \
                --instance-profile-name aws-elasticbeanstalk-ec2-role \
                --role-name aws-elasticbeanstalk-ec2-role
            fi

            sleep 15

            aws elasticbeanstalk create-environment \
              --application-name ${{ env.EB_APP_NAME }} \
              --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
              --solution-stack-name "64bit Amazon Linux 2023 v4.6.4 running Corretto 17" \
              --version-label $VERSION_LABEL \
              --option-settings \
                Namespace=aws:elasticbeanstalk:environment,OptionName=EnvironmentType,Value=SingleInstance \
                Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t3.micro \
                Namespace=aws:autoscaling:launchconfiguration,OptionName=IamInstanceProfile,Value=aws-elasticbeanstalk-ec2-role \
                Namespace=aws:elasticbeanstalk:environment,OptionName=ServiceRole,Value=aws-elasticbeanstalk-service-role

            # Wait until environment is ready
            echo "Waiting for environment to be Ready..."
            while true; do
              STATUS=$(aws elasticbeanstalk describe-environments \
                --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
                --query 'Environments[0].Status' \
                --output text 2>/dev/null || echo "NOT_FOUND")
              echo "Current status: $STATUS"
              if [ "$STATUS" = "Ready" ]; then
                echo "Environment is ready."
                break
              fi
              sleep 15
            done
          }

          # Check if environment exists
          ENV_EXISTS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].EnvironmentName' \
            --output text 2>/dev/null || echo "")

          if [ -z "$ENV_EXISTS" ]; then
            create_environment
          else
            echo "Environment exists, updating version..."
            aws elasticbeanstalk update-environment \
              --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
              --version-label $VERSION_LABEL
          fi

      - name: Wait for deployment
        run: |
          echo "Waiting additional 60s to stabilize..."
          sleep 60

      - name: Get Elastic Beanstalk environment URL
        run: |
          EB_URL=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].CNAME' \
            --output text)
          echo "Elastic Beanstalk Environment URL: http://$EB_URL"

      - name: Check deployment status
        run: |
          aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].[EnvironmentName, Status, Health, VersionLabel]' \
            --output table
