name: Build, Push to ECR and Generate Deployment Artifacts

on:
  push:
    branches: [ "master" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: java-full-stack
  ARTIFACT_BUCKET: week5-lab-cloud-formation-artifactbucket-fiwzmxqstzqx

jobs:
  build-push-and-generate-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::481980074895:role/java-full-stack-GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: ${{ env.ECR_REPOSITORY }}" 
          
          # Build the Docker image
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

      - name: Generate Deployment Artifacts
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Get the actual task definition ARN
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          TASK_DEF_ARN="arn:aws:ecs:${{ env.AWS_REGION }}:$ACCOUNT_ID:task-definition/java-full-stack-Task"
          
          # Create appspec.yml with REAL ARN
          cat > appspec.yml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$TASK_DEF_ARN"
                  LoadBalancerInfo:
                    ContainerName: "java-full-stack-Container"
                    ContainerPort: 8080
          EOF

          # Create taskdef.json
          cat > taskdef.json << EOF
          {
            "family": "java-full-stack-Task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::$ACCOUNT_ID:role/java-full-stack-ECSTaskExecutionRole",
            "taskRoleArn": "arn:aws:iam::$ACCOUNT_ID:role/java-full-stack-ECSTaskRole",
            "containerDefinitions": [
              {
                "name": "java-full-stack-Container",
                "image": "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "protocol": "tcp"
                  }
                ],
                "healthCheck": {
                  "command": ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3,
                  "startPeriod": 60
                },
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/java-full-stack",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF

          # Create the ZIP file that CodeDeploy expects
          zip -r deployment-artifacts.zip appspec.yml taskdef.json

          echo "Generated deployment-artifacts.zip contents:"
          unzip -l deployment-artifacts.zip

      - name: Upload Deployment Artifacts to S3
        run: |
          # Upload the ZIP file to S3
          aws s3 cp deployment-artifacts.zip s3://${{ env.ARTIFACT_BUCKET }}/deployment-artifacts/latest.zip
          
          # Also upload individual files for reference
          aws s3 cp appspec.yml s3://${{ env.ARTIFACT_BUCKET }}/deployment-artifacts/
          aws s3 cp taskdef.json s3://${{ env.ARTIFACT_BUCKET }}/deployment-artifacts/

      - name: Trigger CodePipeline Execution
        run: |
          # Manually start the pipeline after uploading artifacts
          aws codepipeline start-pipeline-execution --name java-full-stack-Pipeline
          echo "Pipeline execution triggered"