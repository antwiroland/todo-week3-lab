name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  EB_APP_NAME: spring-boot-eb-demo
  S3_BUCKET_NAME: beantalk-bucket
  EB_ENVIRONMENT_NAME: spring-boot-eb-demo-env

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test with Maven
        run: mvn clean package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: target

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare deployment package
        run: |
          if [ ! -f system.properties ]; then
            echo "java.runtime.version=17" > system.properties
          fi

          mkdir -p deployment
          cp target/*.jar deployment/application.jar
          cp system.properties deployment/
          cp Procfile deployment/ 2>/dev/null || echo "No Procfile found"

          if [ ! -f deployment/Procfile ]; then
            echo "web: java -jar application.jar" > deployment/Procfile
          fi

          cd deployment && zip -r ../deploy.zip . && cd ..
          echo "Deployment package created successfully"

      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://${{ env.S3_BUCKET_NAME }}/deploy-${{ github.sha }}.zip

      - name: Check if Elastic Beanstalk application exists
        id: check-eb-app
        run: |
          if aws elasticbeanstalk describe-applications --application-names ${{ env.EB_APP_NAME }} > /dev/null 2>&1; then
            echo "app_exists=true" >> $GITHUB_OUTPUT
            echo "Application ${{ env.EB_APP_NAME }} exists"
          else
            echo "app_exists=false" >> $GITHUB_OUTPUT
            echo "Application ${{ env.EB_APP_NAME }} does not exist"
          fi

      - name: Create Elastic Beanstalk application if not exists
        if: steps.check-eb-app.outputs.app_exists == 'false'
        run: |
          echo "Creating Elastic Beanstalk application: ${{ env.EB_APP_NAME }}"
          aws elasticbeanstalk create-application \
            --application-name ${{ env.EB_APP_NAME }} \
            --description "Spring Boot application"
          
          echo "Waiting for application to be created..."
          # Wait and verify application was created
          for i in {1..12}; do
            if aws elasticbeanstalk describe-applications --application-names ${{ env.EB_APP_NAME }} > /dev/null 2>&1; then
              echo "Application ${{ env.EB_APP_NAME }} successfully created"
              break
            fi
            echo "Waiting for application creation to complete... (attempt $i/12)"
            sleep 10
          done
          
          # Final verification
          if ! aws elasticbeanstalk describe-applications --application-names ${{ env.EB_APP_NAME }} > /dev/null 2>&1; then
            echo "ERROR: Application ${{ env.EB_APP_NAME }} was not created successfully"
            exit 1
          fi

      - name: Verify application exists before proceeding
        run: |
          echo "Verifying application ${{ env.EB_APP_NAME }} exists..."
          if ! aws elasticbeanstalk describe-applications --application-names ${{ env.EB_APP_NAME }} > /dev/null 2>&1; then
            echo "ERROR: Application ${{ env.EB_APP_NAME }} does not exist. Cannot proceed."
            exit 1
          fi
          echo "Application verified successfully"

      - name: Check if Elastic Beanstalk environment exists
        id: check-eb-env
        run: |
          if aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APP_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query "Environments[].EnvironmentName" \
            --output text | grep -q "${{ env.EB_ENVIRONMENT_NAME }}"; then
            echo "env_exists=true" >> $GITHUB_OUTPUT
            echo "Environment ${{ env.EB_ENVIRONMENT_NAME }} exists"
          else
            echo "env_exists=false" >> $GITHUB_OUTPUT
            echo "Environment ${{ env.EB_ENVIRONMENT_NAME }} does not exist"
          fi

      - name: Create or use eb-config.json
        id: eb-config
        run: |
          if [ -f eb-config.json ]; then
            echo "Using existing eb-config.json from repository"
            cat eb-config.json
            echo "config_source=repository" >> $GITHUB_OUTPUT
          else
            echo "Creating default eb-config.json"
            cat > eb-config.json << 'EOF'
              [
                {
                  "Namespace": "aws:elasticbeanstalk:environment",
                  "OptionName": "EnvironmentType",
                  "Value": "SingleInstance"
                },
                {
                  "Namespace": "aws:elasticbeanstalk:application:environment",
                  "OptionName": "PORT",
                  "Value": "5000"
                },
                {
                  "Namespace": "aws:autoscaling:launchconfiguration",
                  "OptionName": "IamInstanceProfile",
                  "Value": "aws-elasticbeanstalk-ec2-role"
                },
                {
                  "Namespace": "aws:elasticbeanstalk:healthreporting:system",
                  "OptionName": "SystemType",
                  "Value": "enhanced"
                }
              ]
          EOF
            echo "config_source=generated" >> $GITHUB_OUTPUT
            cat eb-config.json
          fi


      - name: Wait for application to be available
        run: |
          echo "Waiting for Elastic Beanstalk application ${{ env.EB_APP_NAME }} to be ready..."
          for i in {1..12}; do
            if aws elasticbeanstalk describe-applications --application-names ${{ env.EB_APP_NAME }} > /dev/null 2>&1; then
              echo "Application ${{ env.EB_APP_NAME }} is now available"
              break
            fi
            echo "Waiting... ($i/12)"
            sleep 10
          done

          if ! aws elasticbeanstalk describe-applications --application-names ${{ env.EB_APP_NAME }} > /dev/null 2>&1; then
            echo "ERROR: Application ${{ env.EB_APP_NAME }} still not found after waiting"
            exit 1
          fi

      - name: Create Elastic Beanstalk environment if not exists
        if: steps.check-eb-env.outputs.env_exists == 'false'
        run: |
          echo "Creating Elastic Beanstalk environment: ${{ env.EB_ENVIRONMENT_NAME }}"
          
          # Use solution stack name instead of platform ARN for simplicity
          aws elasticbeanstalk create-environment \
            --application-name ${{ env.EB_APP_NAME }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
            --solution-stack-name "64bit Amazon Linux 2023 v4.6.4 running Corretto 17" \
            --option-settings file://eb-config.json \
            --version-label ${{ github.sha }} \
            --tier Name=WebServer,Type=Standard,Version=1.0

          echo "Environment creation initiated. It may take several minutes to complete."

      - name: Create Elastic Beanstalk application version
        run: |
          echo "Creating application version for ${{ github.sha }}"
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APP_NAME }} \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="deploy-${{ github.sha }}.zip" \
            --description "Commit: ${{ github.sha }}"

      - name: Deploy to Elastic Beanstalk environment
        if: steps.check-eb-env.outputs.env_exists == 'true'
        run: |
          echo "Deploying version ${{ github.sha }} to existing environment"
          aws elasticbeanstalk update-environment \
            --application-name ${{ env.EB_APP_NAME }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
            --version-label ${{ github.sha }}

      - name: Wait for deployment completion
        run: |
          echo "Waiting for deployment to complete..."
          sleep 120  # Wait longer for environment to be ready
          
          # Check environment status
          HEALTH_STATUS=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APP_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query "Environments[0].Health" \
            --output text)
          
          echo "Environment health status: $HEALTH_STATUS"

      - name: Verify deployment
        run: |
          echo "Final deployment verification..."
          HEALTH_STATUS=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APP_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query "Environments[0].Health" \
            --output text)
          
          STATUS=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APP_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query "Environments[0].Status" \
            --output text)
          
          echo "Environment status: $STATUS"
          echo "Environment health: $HEALTH_STATUS"

          if [ "$STATUS" != "Ready" ] || [ "$HEALTH_STATUS" != "Green" ]; then
            echo "Deployment may have issues. Checking recent events..."
            aws elasticbeanstalk describe-events \
              --application-name ${{ env.EB_APP_NAME }} \
              --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
              --max-items 10 \
              --query "Events[].Message"
            echo "Deployment completed with warnings, but continuing..."
          else
            echo "Deployment completed successfully!"
          fi